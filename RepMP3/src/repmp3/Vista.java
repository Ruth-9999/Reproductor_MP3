/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

package repmp3;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javazoom.jl.decoder.JavaLayerException;
import javazoom.jl.player.Player;
import javazoom.jl.player.advanced.AdvancedPlayer;
import javazoom.jl.player.advanced.PlaybackListener;
import javazoom.jl.player.advanced.PlaybackEvent;


/**
 *
 * @author Rusty
 */
public class Vista extends javax.swing.JFrame {

    /**
     * Creates new form Vista
     */
    private AdvancedPlayer player;
    private Thread playerThread;
    private long newLocation;
    private long songTotalLength;
    private long skipAmount;
    private FileInputStream fis;
    private File file;
    private String ruta;
    private boolean isPaused = false;
    private AudioData audioData;
    private DefaultTableModel tableModel;
    private Timer progressTimer;
    
   
    
    public Vista() {

        audioData = new AudioData(); // Instanciar AudioData        
        initComponents();
        setupTable();
        audioData.populateTable(tableModel);
        setupBarra();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jSeparator1 = new javax.swing.JSeparator();
        jLTitulo = new javax.swing.JLabel();
        jLogo = new javax.swing.JLabel();
        jTAudioSelec = new javax.swing.JTextField();
        jBRetroceder = new javax.swing.JButton();
        jBDetener = new javax.swing.JButton();
        jBReproducir = new javax.swing.JButton();
        jBPausa = new javax.swing.JButton();
        jBAdelantar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTablaAudios = new javax.swing.JTable();
        jLOptar = new javax.swing.JLabel();
        jSBarra = new javax.swing.JSlider();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jLTitulo.setFont(new java.awt.Font("Roboto Medium", 0, 37)); // NOI18N
        jLTitulo.setText("Reproductor del Himno Nacional Argentino");

        jLogo.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLogo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/repmp3/imagen/sol_mayo.png"))); // NOI18N
        jLogo.setMaximumSize(new java.awt.Dimension(1280, 1024));

        jTAudioSelec.setEditable(false);
        jTAudioSelec.setFont(new java.awt.Font("Roboto Light", 1, 14)); // NOI18N
        jTAudioSelec.setForeground(new java.awt.Color(102, 102, 102));
        jTAudioSelec.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTAudioSelec.setText(" Sin audio Seleccionado");
        jTAudioSelec.setBorder(null);
        jTAudioSelec.setCaretColor(new java.awt.Color(102, 102, 102));

        jBRetroceder.setText("Rewind");
        jBRetroceder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBRetrocederActionPerformed(evt);
            }
        });

        jBDetener.setText("Stop");
        jBDetener.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBDetenerActionPerformed(evt);
            }
        });

        jBReproducir.setText("Play");
        jBReproducir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBReproducirActionPerformed(evt);
            }
        });

        jBPausa.setText("Pause");
        jBPausa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBPausaActionPerformed(evt);
            }
        });

        jBAdelantar.setText("Advance");
        jBAdelantar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBAdelantarActionPerformed(evt);
            }
        });

        jTablaAudios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTablaAudios.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTablaAudiosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTablaAudios);

        jLOptar.setFont(new java.awt.Font("Roboto Light", 1, 14)); // NOI18N
        jLOptar.setForeground(new java.awt.Color(102, 102, 102));
        jLOptar.setText("Seleccione la version que desea escuchar");

        jSBarra.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSBarraStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSBarra, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTAudioSelec, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addComponent(jLogo, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jBDetener)
                                .addGap(18, 18, 18)
                                .addComponent(jBReproducir, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jBPausa))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jBRetroceder, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jBAdelantar, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(26, 26, 26)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLOptar, javax.swing.GroupLayout.PREFERRED_SIZE, 394, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 710, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLTitulo))
                .addContainerGap(33, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(jLogo, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jTAudioSelec, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jSBarra, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jBReproducir)
                            .addComponent(jBDetener)
                            .addComponent(jBPausa))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jBRetroceder)
                            .addComponent(jBAdelantar)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jLTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLOptar, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 468, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(44, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBAdelantarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBAdelantarActionPerformed
       
        if (songTotalLength - newLocation <= 15000) {
            JOptionPane.showMessageDialog(this, "No se puede adelantar más el audio.");
        } else {
            seek(15000);
        }
    }//GEN-LAST:event_jBAdelantarActionPerformed

    private void jBDetenerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBDetenerActionPerformed
       
        if (player == null) {
            JOptionPane.showMessageDialog(this, "Actualmente el audio está detenido.");
        } else {
            stop();
        }    
    }//GEN-LAST:event_jBDetenerActionPerformed

    private void jBReproducirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBReproducirActionPerformed
       
        if (player != null && playerThread != null && playerThread.isAlive()) {
            JOptionPane.showMessageDialog(this, "Actualmente se está reproduciendo un audio.");
        } else if (isPaused) {
            resume();
        } else if (file != null) {
            play();
        } else {
            JOptionPane.showMessageDialog(this, "Por favor, seleccione un archivo de audio para reproducir.");
        }
    }//GEN-LAST:event_jBReproducirActionPerformed

    private void jBPausaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBPausaActionPerformed
       
       if (isPaused) {
            JOptionPane.showMessageDialog(this, "Actualmente el audio está pausado.");
        } else {
            pause();
        }
    }//GEN-LAST:event_jBPausaActionPerformed

    private void jBRetrocederActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBRetrocederActionPerformed
    
            if (newLocation <= 15000) {
            JOptionPane.showMessageDialog(this, "No se puede retroceder más el audio.");
        } else {
            seek(-15000);
        }
    }//GEN-LAST:event_jBRetrocederActionPerformed

    private void jSBarraStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSBarraStateChanged
        // Verifica si el valor de la barra de progreso no está siendo ajustado.
        // y si el reproductor no es nulo.
            if (!jSBarra.getValueIsAdjusting() && player != null) {

        // Obtiene el porcentaje de progreso actual de la barra.
        int progress = jSBarra.getValue();
        // Llama al método seekToPosition con el progreso actual como parametro.
        seekToPosition(progress);
        }
    }//GEN-LAST:event_jSBarraStateChanged

    private void jTablaAudiosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTablaAudiosMouseClicked

        //Se obtiene el índice de la fila seleccionada en la tabla y se lo designa a una variable. 
        int selectedRow = jTablaAudios.getSelectedRow();
        if (selectedRow != -1) {
            //Obtiene el valor de la celda en la columna 0 ("Nombre") y de la fila seleccionada.
            //Este valor se almacena en la variable nombre.    
            String nombre = (String) tableModel.getValueAt(selectedRow, 0);
                jTAudioSelec.setText("ESCUCHAMOS: " + nombre); //Actualiza la informacion del JLabel.
                
                ruta = audioData.getRutaByNombre(nombre); // Usar el método de AudioData
                file = new File(ruta);   
                
            }
        
    }//GEN-LAST:event_jTablaAudiosMouseClicked

    private void play() {
        try {            
            System.out.println("Ruta del archivo: " + file.getAbsolutePath());
            if (!file.exists()) {
                JOptionPane.showMessageDialog(this, "El archivo no existe en la ruta especificada: " + file.getAbsolutePath());
                return;
            }
            
            fis = new FileInputStream(file); // Abre el archivo de audio y lo convierte en un FileInputStream.
            songTotalLength = fis.available();  // Se obtiene la longitud total del archivo en bytes.
            player = new AdvancedPlayer(fis);           
 
            // Establece un oyente, un PlaybackListener para cuando se finaliza la reproducción.       
            player.setPlayBackListener(new PlaybackListener() {
                @Override
                public void playbackFinished(PlaybackEvent evt) {
                    stopProgressTimer();
                }  //PlaybackFinished: Método sobrescrito 
                   //Se ejecuta cuando la reproducción  termina para detener el temporizador.
            });
            // Crea un nuevo hilo para la reproducción del audio.
            playerThread = new Thread(() -> {
                try {
                    player.play();
                } catch (JavaLayerException e) {
                    Logger.getLogger(Vista.class.getName()).log(Level.SEVERE, null, e);
                    JOptionPane.showMessageDialog(this, "Error al reproducir archivo: " + e.getMessage());
                }
            });
            // Inicia el hilo de reproducción.
            playerThread.start();
            isPaused = false;
            
            // Se inicia el temporizador para actualizar la barra de progreso.
            startProgressTimer();
        } catch (IOException | JavaLayerException e) {
            Logger.getLogger(Vista.class.getName()).log(Level.SEVERE, null, e);
            JOptionPane.showMessageDialog(this, "Error al inicializar el reproductor: " + e.getMessage());
        }
    }

    private void pause() {
        try {
            if (player != null) {
                newLocation = fis.available(); // Guarda la posición actual en el archivo de audio.
                skipAmount = songTotalLength - newLocation; // Guarda el calculo de la posición saltada.
                player.close();
                playerThread.interrupt();
                isPaused = true;
                stopProgressTimer(); // Detiene el temporizador de progreso.
            }
        } catch (IOException e) {
            Logger.getLogger(Vista.class.getName()).log(Level.SEVERE, null, e);
            JOptionPane.showMessageDialog(this, "Error al pausar el archivo: " + e.getMessage());
        }
    }

    private void stop() {
        if (player != null) {
            player.close();
            playerThread.interrupt();
            try {
                fis.close();  // Cierra el FileInputStream y lo reinicia.
                fis = new FileInputStream(file);
                isPaused = false;
                stopProgressTimer();
                jSBarra.setValue(0); // Restablece el temporizador de progreso.
            } catch (IOException e) {
                Logger.getLogger(Vista.class.getName()).log(Level.SEVERE, null, e);
                JOptionPane.showMessageDialog(this, "Error al detener el archivo: " + e.getMessage());
            }
        }
    }

    //Metodo Reanudar
    private void resume() {
        
    try {
                fis = new FileInputStream(file);
                fis.skip(skipAmount); // Salta a la posición guardada
                player = new AdvancedPlayer(fis);
                //Establece un oyente para ejecutar acciones cuando la reproducción finalice.   
                player.setPlayBackListener(new PlaybackListener() {
                //Método sobrescrito que detiene el temporizador cuando la reproducción del audio termina.      
                    @Override
                    public void playbackFinished(PlaybackEvent evt) {
                        stopProgressTimer();
                    }
                });

                playerThread = new Thread(() -> {
                    try {
                        player.play();
                    } catch (JavaLayerException e) {
                        Logger.getLogger(Vista.class.getName()).log(Level.SEVERE, null, e);
                        JOptionPane.showMessageDialog(this, "Error al reanudar el archivo de audio: " + e.getMessage());
                    }
                });
                playerThread.start();
                isPaused = false;
                //Inicia el temporizador de progreso para actualizar la barra de progreso.
                startProgressTimer();
            } catch (IOException | JavaLayerException e) {
                Logger.getLogger(Vista.class.getName()).log(Level.SEVERE, null, e);
                JOptionPane.showMessageDialog(this, "Error al reanudar el reproductor: " + e.getMessage());
            }
    }

    // Este metodo hace un salto de 15 segundos y reproduce el audio desde su nueva posicion.
    private void seek(long milliseconds) {

        try {
                if (player != null) {
                    newLocation = fis.available(); // Guarda la posición actual
                    player.close();
                    playerThread.interrupt();
                    fis = new FileInputStream(file); // Reinicia el archivo de audio
                    // Se calcula la cantidad de bytes a saltar en el audio basado en el tiempo en milisegundos. 
                    //NOTA: se utiliza una aproximación de 38 bytes por milisegundo.
//                    skipAmount = Math.max(0, songTotalLength - newLocation + milliseconds * 38); // Calcula la nueva posición
                    long calculo = Math.max(0, newLocation + milliseconds * 38); // Calcula la nueva posición basada en la posición actual
                     skipAmount = songTotalLength - calculo; // Salta a la nueva posición
                    
                    
                    isPaused = true; // Establece el estado en pausa
                    stopProgressTimer(); // Detiene el temporizador de progreso.
                }
            } catch (IOException e) {
                Logger.getLogger(Vista.class.getName()).log(Level.SEVERE, null, e);
                JOptionPane.showMessageDialog(this, "Error al adelantar/retroceder el reproductor: " + e.getMessage());
            }

    }
            
    //Metodo de salto de posicion y reproduce el audio desde su nueva posicion.
    private void seekToPosition(int progress) {

        try {
                if (player != null) {
                    newLocation = fis.available(); // Guarda la posición actual
                    player.close();
                    playerThread.interrupt();
                    fis = new FileInputStream(file); // Reinicia el archivo de audio
                    // Calcula la nueva posición del audio basada en el porcentaje de progreso.
                long newPosition = (long) (songTotalLength * (progress / 100.0));
                    // Guarda la nueva posición en la variable skipAmount.
                    skipAmount = newPosition; // Establece la nueva posición
                    isPaused = true; // Establece el estado en pausa
                    stopProgressTimer(); // Detiene el temporizador de progreso.
                }
            } catch (IOException e) {
                Logger.getLogger(Vista.class.getName()).log(Level.SEVERE, null, e);
                JOptionPane.showMessageDialog(this, "Error al saltar a la nueva posición del reproductor: " + e.getMessage());
            }

    }

    private void startProgressTimer() {
        //Crea un nuevo temporizador que se ejecuta cada 1000 milisegundos (1seg).
        progressTimer = new Timer(1000, e -> {
            if (fis != null) {
                try {
                    // Calcula la posición actual en el audio.
                    long currentPos = songTotalLength - fis.available();
                    // Calcula el progreso como un porcentaje de la longitud total del audio.
                    int progress = (int) (100 * currentPos / songTotalLength);
                    jSBarra.setValue(progress); //Actualiza el porcentaje de la barra de progreso.
                } catch (IOException ex) {
                    ex.printStackTrace();
                }
            }
        });
        progressTimer.start();
    }

    private void stopProgressTimer() {
        if (progressTimer != null) { // Verifica si el temporizador de progreso está inicializado.
            progressTimer.stop();
        }
    }
    
    private DefaultTableModel NonEditable(Object[] columnNames) {
    return new DefaultTableModel(columnNames, 0) {
        @Override // Crea un modelo de tabla donde las celdas no sean editables.
        public boolean isCellEditable(int row, int column) {
            return false;
        }
    };
}

    private void setupTable() {          

    // Asegúrarse de no realizar conversiones incorrectas a Border??? 
        try {
           String[] columnNames = {"Nombre", "Artista", "Año", "Álbum", "Duración/Seg"};
        tableModel = NonEditable(columnNames);
        jTablaAudios.setModel(tableModel);
        jTablaAudios.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        } catch (ClassCastException e) {
            Logger.getLogger(Vista.class.getName()).log(Level.SEVERE, "Error en la conversión de Border: " + e.getMessage());
        }

    }
    
    private void setupBarra() {
        jSBarra.setMinimum(0); // Valor mínimo del slider
        jSBarra.setMaximum(100); // Valor máximo del slider
        jSBarra.setValue(0); // Inicializa la barra en cero
        jSBarra.setMajorTickSpacing(10); // Espaciado principal cada 10 unidades
        jSBarra.setMinorTickSpacing(1); // Espaciado menor cada 1 unidad
        jSBarra.setPaintTicks(true); // Habilita las marcas
        jSBarra.setPaintLabels(true); // Habilita las etiquetas
    }    
    
    
    
    


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBAdelantar;
    private javax.swing.JButton jBDetener;
    private javax.swing.JButton jBPausa;
    private javax.swing.JButton jBReproducir;
    private javax.swing.JButton jBRetroceder;
    private javax.swing.JLabel jLOptar;
    private javax.swing.JLabel jLTitulo;
    private javax.swing.JLabel jLogo;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSlider jSBarra;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField jTAudioSelec;
    private javax.swing.JTable jTablaAudios;
    // End of variables declaration//GEN-END:variables

    
}
